<?
//
// $Id$
//
function ZipDump($db_link,$sql_query,$bpn,$filename)
{

function PMA_myCsvHandler($sql_insert, &$add_character, &$tmp_buffer)
   {
   $tmp_buffer .= $sql_insert . $add_character;
   }

/**
 * Get the variables sent or posted to this script and a core script
 */
require('./libraries/common.lib.php3');
require('./libraries/build_dump.lib.php3');
require_once("f_homepageurl.phtml");

   /**
    * Defines the url to return to in case of error in a sql statement
    */
   $err_url = HomePageUrl();

   /**
    * Increase time limit for script execution and initializes some variables
    */
   @set_time_limit($cfgExecTimeLimit);
   $dump_buffer = '';
   // Defines the default <CR><LF> format
   $crlf        = PMA_whichCrlf();

   /**
    * Send headers
    */
   // Define extension and mime types
   $ext       = 'zip';
   $mime_type = 'application/x-zip';

   // Send headers
   header('Content-Type: ' . $mime_type);
   // lem9 & loic1: IE need specific headers
   if (PMA_USR_BROWSER_AGENT == 'IE') {
      header('Content-Disposition: inline; filename="' . $filename . '.' . $ext . '"');
      header('Expires: 0');
      header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
      header('Pragma: public');
   } else {
      header('Content-Disposition: attachment; filename="' . $filename . '.' . $ext . '"');
      header('Expires: 0');
      header('Pragma: no-cache');
   }

   /**
    * Builds the dump
    */
   $num_tables = 1;
   $single     = TRUE;
   $add_character = "\015\012";
   $tmp_buffer = '';
   PMA_getTableCsv($db_link,stripslashes($sql_query), 'PMA_myCsvHandler', $err_url, $add_character, $tmp_buffer);
   $dump_buffer .= $tmp_buffer;

   /**
    * "Displays" the dump as a ZIP file
    */
   $scratch_bpn_path = "scratch/$bpn";
   mkdir($scratch_bpn_path);
   $zip_archive_name = "$scratch_bpn_path/$filename.zip";
   $zip_archive = new ZipArchive;
   $zip_archive->open($zip_archive_name,ZipArchive::CREATE | ZipArchive::OVERWRITE) or die("ZipArchive::open failed.");
   $zip_archive->addFromString("$filename.csv",$dump_buffer) or die ("ZipArchive::addFromString failed.");
   $zip_archive->close() or die("ZipArchive::close failed.");
   readfile($zip_archive_name);
   unlink($zip_archive_name) or die("unlink failed.");
   rmdir($scratch_bpn_path);

}
?>